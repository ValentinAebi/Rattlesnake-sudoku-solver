
// Returns a copy of the given integer array
fn copyArray(array: arr Int) -> arr Int {
    val newArray = arr Int[#array];
    copyArrayInto(array, newArray);
    return newArray;
}

fn copyArrayInto(origin: arr Int, dest: arr Int){
    require(#origin == #dest, "array sizes differ");
    for var i = 0; i < #origin; i += 1 {
        dest[i] = origin[i];
    };
}

// Square root of an integer
// Panics if i is not a perfect square
fn sqrt(i: Int) -> Int {
    for var r = 0, var sq = 0; sq < i; r += 1 {
        sq = r*r;
        if sq == i {
            return r;
        };
    };
    panic "not a perfect square";
}

fn isPerfectSquare(i: Int) -> Bool {
    for var r = 0, var sq = 0; sq < i; r += 1 {
        sq = r*r;
        if sq == i {
            return true;
        };
    };
    return false;
}

// Returns an array containing the numbers in the requested range
// e.g. rangeArray(10, 14) == [10, 11, 12, 13, 14]
fn rangeArray(from: Int, to: Int) -> arr Int {
    val res = arr Int[to-from+1];
    for var i = from; i <= to; i += 1 {
        res[i-from] = i;
    };
    return res;
}

fn require(cond: Bool, msg: String){
    if !cond {
        panic msg
    }
}

fn assert(cond: Bool, msg: String){
    if !cond {
        panic msg
    }
}
