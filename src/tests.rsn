
// Grids from https://sudoku.com/ and https://www.e-sudoku.fr/

test grid_4x4_test {
    val grid = gridFromIntArray([

        [0, 0,   0, 4],
        [4, 0,   2, 0],

        [0, 1,   0, 0],
        [3, 0,   0, 0]
    ]);
    val sols = solve(grid);
    assertEquals(1, #sols, "solutions count error");
    val exp = [

        [1, 2,   3, 4],
        [4, 3,   2, 1],

        [2, 1,   4, 3],
        [3, 4,   1, 2]
    ];
    assertGridEquals(exp, sols[0]);
}

test grid_9x9_test_1 {
    val grid = gridFromIntArray([
        [0, 0, 0,  0, 0, 0,  0, 6, 0],
        [0, 8, 6,  0, 0, 0,  3, 0, 0],
        [4, 5, 2,  0, 8, 0,  0, 0, 0],

        [0, 0, 0,  8, 0, 0,  9, 0, 0],
        [0, 2, 7,  3, 0, 9,  0, 5, 0],
        [1, 0, 8,  2, 0, 0,  0, 0, 0],

        [2, 0, 0,  5, 9, 0,  0, 0, 4],
        [0, 0, 0,  0, 0, 0,  6, 8, 0],
        [0, 0, 0,  7, 6, 4,  0, 0, 9]
    ]);
    val sols = solve(grid);
    assertEquals(1, #sols, "solutions count error");
    assertLogEmpty(checkGrid(sols[0]));
    assert(isComplete(sols[0]), "grid is not complete");
}

test grid_9x9_test_2 {
    val grid = gridFromIntArray([
        [0, 1, 6,  0, 8, 0,  5, 3, 0],
        [0, 0, 4,  0, 0, 0,  0, 0, 0],
        [0, 0, 0,  9, 0, 0,  0, 8, 0],

        [4, 0, 0,  0, 1, 0,  0, 0, 0],
        [9, 0, 0,  0, 0, 0,  3, 0, 0],
        [0, 3, 1,  7, 0, 0,  0, 0, 6],

        [0, 0, 0,  0, 0, 2,  0, 0, 7],
        [3, 0, 0,  0, 0, 0,  0, 0, 0],
        [0, 5, 8,  0, 9, 0,  6, 0, 0]
    ]);
    val sols = solve(grid);
    assertEquals(1, #sols, "solutions count error");
    assertLogEmpty(checkGrid(sols[0]));
    assert(isComplete(sols[0]), "grid is not complete");
}

test grid_9x9_easy_test {
    val grid = gridFromIntArray([
        [0, 0, 2,  3, 0, 0,  0, 8, 1],
        [0, 8, 0,  5, 6, 0,  0, 3, 7],
        [5, 1, 0,  0, 0, 0,  0, 0, 0],

        [0, 9, 6,  0, 5, 2,  0, 0, 0],
        [3, 0, 0,  4, 9, 6,  0, 0, 8],
        [0, 0, 0,  7, 3, 0,  6, 5, 0],

        [0, 0, 0,  0, 0, 0,  0, 1, 3],
        [1, 3, 0,  0, 7, 5,  0, 4, 0],
        [4, 2, 0,  0, 0, 3,  9, 0, 0]
    ]);
    val sols = solve(grid);
    assertEquals(1, #sols, "solutions count error");
    val exp = [
        [7, 6, 2,  3, 4, 9,  5, 8, 1],
        [9, 8, 4,  5, 6, 1,  2, 3, 7],
        [5, 1, 3,  2, 8, 7,  4, 9, 6],

        [8, 9, 6,  1, 5, 2,  3, 7, 4],
        [3, 7, 5,  4, 9, 6,  1, 2, 8],
        [2, 4, 1,  7, 3, 8,  6, 5, 9],

        [6, 5, 8,  9, 2, 4,  7, 1, 3],
        [1, 3, 9,  6, 7, 5,  8, 4, 2],
        [4, 2, 7,  8, 1, 3,  9, 6, 5]
    ];
    assertGridEquals(exp, sols[0]);
}

test grid_9x9_difficult_test {
    val grid = gridFromIntArray([
        [0, 1, 0,  0, 9, 0,  6, 0, 0],
        [0, 0, 0,  0, 0, 7,  0, 0, 0],
        [2, 0, 0,  0, 8, 0,  5, 0, 3],

        [0, 3, 0,  0, 0, 0,  0, 8, 4],
        [0, 0, 6,  0, 0, 0,  3, 0, 0],
        [5, 9, 0,  0, 0, 0,  0, 1, 0],

        [1, 0, 8,  0, 4, 0,  0, 0, 9],
        [0, 0, 0,  5, 0, 0,  0, 0, 0],
        [0, 0, 3,  0, 7, 0,  0, 2, 0]
    ]);
    val sols = solve(grid);
    assertEquals(1, #sols, "solutions count error");
    val exp = [
        [3, 1, 5,  4, 9, 2,  6, 7, 8],
        [6, 8, 9,  3, 5, 7,  1, 4, 2],
        [2, 4, 7,  1, 8, 6,  5, 9, 3],

        [7, 3, 1,  6, 2, 5,  9, 8, 4],
        [8, 2, 6,  9, 1, 4,  3, 5, 7],
        [5, 9, 4,  7, 3, 8,  2, 1, 6],

        [1, 5, 8,  2, 4, 3,  7, 6, 9],
        [4, 7, 2,  5, 6, 9,  8, 3, 1],
        [9, 6, 3,  8, 7, 1,  4, 2, 5]
    ];
    assertGridEquals(exp, sols[0]);
}

test grid_9x9_demoniac_test {
    val grid = gridFromIntArray([
        [0, 0, 0,  0, 1, 6,  0, 0, 9],
        [0, 0, 0,  0, 0, 9,  0, 0, 2],
        [0, 0, 0,  5, 2, 0,  4, 3, 0],

        [0, 0, 2,  0, 0, 3,  0, 9, 4],
        [0, 0, 4,  0, 0, 0,  5, 0, 0],
        [9, 7, 0,  1, 0, 0,  6, 0, 0],

        [0, 4, 9,  0, 3, 1,  0, 0, 0],
        [7, 0, 0,  9, 0, 0,  0, 0, 0],
        [1, 0, 0,  2, 5, 0,  0, 0, 0]
    ]);
    val sols = solve(grid);
    assertEquals(1, #sols, "solutions count error");
    val exp = [
        [2, 3, 7,  4, 1, 6,  8, 5, 9],
        [4, 5, 6,  3, 8, 9,  7, 1, 2],
        [8, 9, 1,  5, 2, 7,  4, 3, 6],

        [5, 6, 2,  8, 7, 3,  1, 9, 4],
        [3, 1, 4,  6, 9, 2,  5, 7, 8],
        [9, 7, 8,  1, 4, 5,  6, 2, 3],

        [6, 4, 9,  7, 3, 1,  2, 8, 5],
        [7, 2, 5,  9, 6, 8,  3, 4, 1],
        [1, 8, 3,  2, 5, 4,  9, 6, 7]
    ];
    assertGridEquals(exp, sols[0]);
}

test grid_16x16_test {

    val a = 10;
    val b = 11;
    val c = 12;
    val d = 13;
    val e = 14;
    val f = 15;
    val g = 16;

    val grid = gridFromIntArray([

        [0, 2, 0, f,  0, e, 1, 0,  0, c, 4, 0,  8, 0, 6, 0],
        [6, 0, 7, 0,  0, 0, 0, 5,  e, 0, 0, 0,  0, d, 0, 4],
        [0, d, 0, e,  0, 0, 0, 7,  6, 0, 0, 0,  1, 0, 2, 0],
        [4, 0, c, 1,  0, g, 6, 0,  0, 7, 2, 0,  9, b, 0, e],

        [0, 0, 0, 0,  0, f, 0, 0,  0, 0, e, 0,  0, 0, 0, 0],
        [8, 0, 0, b,  7, c, 2, 0,  0, d, 6, 4,  3, 0, 0, a],
        [5, 0, 0, 7,  0, 3, b, 8,  1, f, 9, 0,  g, 0, 0, 2],
        [0, g, 4, 0,  0, 0, d, 0,  0, b, 0, 0,  0, 8, 1, 0],

        [0, 9, a, 0,  0, 0, 7, 0,  0, 2, 0, 0,  0, 3, 5, 0],
        [2, 0, 0, 5,  0, a, 8, c,  4, 9, 3, 0,  6, 0, 0, d],
        [1, 0, 0, g,  9, 2, 4, 0,  0, 6, 7, e,  a, 0, 0, 8],
        [0, 0, 0, 0,  0, 5, 0, 0,  0, 0, g, 0,  0, 0, 0, 0],

        [b, 0, g, 4,  0, d, a, 0,  0, 5, c, 0,  7, 9, 0, 1],
        [0, 5, 0, a,  0, 0, 0, g,  8, 0, 0, 0,  d, 0, e, 0],
        [c, 0, 6, 0,  0, 0, 0, 2,  a, 0, 0, 0,  0, g, 0, f],
        [0, e, 0, 2,  0, b, f, 0,  0, g, 1, 0,  5, 0, 3, 0]
        
    ]);
    val sols = solve(grid);
    assertEquals(1, #sols, "solutions count error");
    assertLogEmpty(checkGrid(sols[0]));
    assert(isComplete(sols[0]), "grid is not complete");
}

///////////// Utils ///////////////////////////////////////////////////////////////////////////////////

fn assertEquals(exp: Int, act: Int, msg: String){
    if exp != act {
        panic msg
    }
}

fn assertGridEquals(exp: arr arr Int, act: Grid){
    checkGridFormat(act);
    assertEquals(#exp, act.size, "grid size mismatch");
    val size = act.size;
    for var r = 0; r < size; r += 1 {
        for var c = 0; c < size; c += 1 {
            val pos = new CellPos { r, c };
            assertEquals(exp[r][c], cellAt(act, pos).content, "mismatch at " + cellPosToString(pos));
        }
    }
}

fn assertLogEmpty(log: ErrorLog){
    if log.errorFound {
        panic log.text
    }
}
