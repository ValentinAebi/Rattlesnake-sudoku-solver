
const c_EMPTY_CELL = 0;

struct Cell {
  var content: Int,
  candidates: mut arr Int
}

// Deep copy of a cell
fn copyCell(cell: Cell) -> mut Cell {
  return new mut Cell { cell.content, copyArray(cell.candidates) }
}

fn copyCellInto(origin: Cell, dest: mut Cell){
  require(#origin.candidates == #dest.candidates, "cell candidates counts differ");
  dest.content = origin.content;
  copyArrayInto(origin.candidates, dest.candidates);
}

struct CellPos {
  row: Int,
  col: Int
}

fn cellPosToString(pos: CellPos) -> String {
  return "(" + intToString(pos.row) + "," + intToString(pos.col) + ")" 
}

fn coordsNonNeg(pos: CellPos) -> Bool {
  return pos.row >= 0 && pos.col >= 0;
}

struct Grid {
  size: Int,
  cells: arr arr mut Cell
}

fn cellAt(grid: Grid, pos: CellPos) -> mut Cell {
  return grid.cells[pos.row][pos.col];
}

// Deep copy of a grid
fn copyGrid(grid: Grid) -> Grid {
  checkGridFormat(grid);
  val newCellsArray = arr mut arr mut Cell[grid.size];
  for var i = 0; i < grid.size; i += 1 {
    val newRow = arr mut Cell[grid.size];
    val oldRow = grid.cells[i];
    for var j = 0; j < grid.size; j += 1 {
      newRow[j] = copyCell(oldRow[j]);
    };
    newCellsArray[i] = newRow;
  };
  return new Grid { grid.size, newCellsArray }
}

fn copyGridInto(origin: Grid, dest: Grid){
  checkGridFormat(origin);
  checkGridFormat(dest);
  require(origin.size == dest.size, "grid sizes differ");
  for var r = 0; r < origin.size; r += 1 {
    for var c = 0; c < origin.size; c += 1 {
      val destCell = dest.cells[r][c];
      val originCell = origin.cells[r][c];
      copyCellInto(originCell, destCell);
    }
  }
}

// Returns a string representation of the given grid
fn gridToString(grid: Grid) -> String {
  checkGridFormat(grid);
  val sectorSize = sqrt(grid.size);
  val horizLine = horizLine(sectorSize);
  var res = horizLine + "\n";
  for var s = 0; s < sectorSize; s += 1 {
    for var i = 0; i < sectorSize; i += 1 {
      res += rowToString(grid.cells[sectorSize*s + i]) + "\n";
    };
    res += horizLine + "\n";
  };
  return res
}

fn gridFromIntArray(cellsValues: arr arr Int) -> Grid {
  val size = #cellsValues;
  val cells = arr mut arr mut Cell[size];
  val grid = new Grid { size, cells };
  for var r = 0; r < size; r += 1 {
    require(#cellsValues[r] == size, "given array is not square");
    cells[r] = arr mut Cell[size];
    for var c = 0; c < size; c += 1 {
      cells[r][c] = new mut Cell { cellsValues[r][c], rangeArray(1, size) };
    }
  };
  return grid
}

fn isComplete(grid: Grid) -> Bool {
  for var r = 0; r < grid.size; r += 1 {
    for var c = 0; c < grid.size; c += 1 {
      if grid.cells[r][c].content == c_EMPTY_CELL {
        return false
      }
    }
  };
  return true
}

// Panics if the grid is malformed
fn checkGridFormat(grid: Grid){
  if !isPerfectSquare(grid.size){
    panic "grid size must be a perfect square";
  };
  if #(grid.cells) != grid.size {
    panic "wrong grid height"
  };
  for var r = 0; r < grid.size; r += 1 {
    if #(grid.cells[r]) != grid.size {
      panic "wrong grid height on row " + intToString(r);
    }
  }
}

// Returns a horizontal line for a grid with the given sector size
fn horizLine(sectorSize: Int) -> String {
  var res = "+-";
  for var s = 0; s < sectorSize; s += 1 {
    for var i = 0; i < sectorSize; i += 1 {
      res += "--";
    };
    res += "+";
    if s < sectorSize - 1 {
      res += "-";
    };
  };
  return res;
}

// Returns the string representation of a row of a grid
fn rowToString(row: arr Cell) -> String {
  val sectorSize = sqrt(#row);
  var res = "| ";
  for var s = 0; s < sectorSize; s += 1 {
    for var i = 0; i < sectorSize; i += 1 {
      res += numberRepr(row[s*sectorSize + i].content) + " ";
    };
    res += "| ";
  };
  return res;
}

// Returns the string that appears in the representation of the grid for the given number
fn numberRepr(number: Int) -> String {
  if number == c_EMPTY_CELL {
    return " ";
  } else if number < 10 {
    return intToString(number)
  } else {
    // 10 -> A, 11 -> B, 12 -> C, etc.
    val char = (('A' as Int) + number - 10) as Char;
    return charToString(char)
  }
}

fn candidatesToString(grid: Grid) -> String {
  var res = "";
  for var r = 0; r < grid.size; r += 1 {
    for var c = 0; c < grid.size; c += 1 {
      if grid.cells[r][c].content == c_EMPTY_CELL {
        res += "(" + intToString(r) + "," + intToString(c) + "): ";
        val candidates = grid.cells[r][c].candidates;
        for var i = 0; i < #candidates; i += 1 {
          if candidates[i] != 0 {
            res += intToString(candidates[i]);
            if i < #candidates - 1 {
              res += ",";
            }
          }
        };
        res += "\n";
      }
    }
  };
  return res;
}
